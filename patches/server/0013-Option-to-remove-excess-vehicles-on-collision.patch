From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yive <6853318+Yive@users.noreply.github.com>
Date: Thu, 5 Oct 2023 17:05:01 -0700
Subject: [PATCH] Option to remove excess vehicles on collision


diff --git a/src/main/java/dev/yive/pluto/PlutoConfig.java b/src/main/java/dev/yive/pluto/PlutoConfig.java
index 9be3f142742240eafc028a203ae3d1810a646ce5..2b0d3213460c1fe7e813c8d64c5e9c10a4a3333f 100644
--- a/src/main/java/dev/yive/pluto/PlutoConfig.java
+++ b/src/main/java/dev/yive/pluto/PlutoConfig.java
@@ -249,5 +249,17 @@ public class PlutoConfig {
         private void disableAllayGameEventListening() {
             disableAllayGameEventListening = getBoolean("entities.allay.disable-game-event-listener", disableAllayGameEventListening);
         }
+
+        public boolean removeExcessMinecarts = false;
+        public boolean removeExcessBoats = false;
+        public int excessMinecartsLimit = 10;
+        public int excessBoatsLimit = 10;
+
+        private void removeExcessVehicles() {
+            removeExcessMinecarts = getBoolean("entities.minecart.remove-excess.enabled", removeExcessMinecarts);
+            removeExcessBoats = getBoolean("entities.boat.remove-excess.enabled", removeExcessBoats);
+            excessMinecartsLimit = getInt("entities.minecart.remove-excess.limit", excessMinecartsLimit);
+            excessBoatsLimit = getInt("entities.boat.remove-excess.limit", excessBoatsLimit);
+        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 44a6118d3bd67a95180f750c17967561946e2e87..6dddd929355e039e53b4e8b0ecac6c97c3672a3d 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -429,6 +429,7 @@ public abstract class AbstractMinecart extends Entity {
                 this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
             }
             // CraftBukkit end
+            int minecartCount = 0; // Pluto - Option to remove excess vehicles on collision
             if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
                 List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
 
@@ -437,6 +438,12 @@ public abstract class AbstractMinecart extends Entity {
 
                     while (iterator.hasNext()) {
                         Entity entity = (Entity) iterator.next();
+                        // Pluto start - Option to remove excess vehicles on collision
+                        if (entity instanceof AbstractMinecart && this.level().plutoConfig().removeExcessMinecarts && minecartCount++ >= this.level().plutoConfig().excessMinecartsLimit) {
+                            entity.discard();
+                            continue;
+                        }
+                        // Pluto end - Option to remove excess vehicles on collision
 
                         if (!(entity instanceof Player) && !(entity instanceof IronGolem) && !(entity instanceof AbstractMinecart) && !this.isVehicle() && !entity.isPassenger()) {
                             // CraftBukkit start
@@ -468,6 +475,12 @@ public abstract class AbstractMinecart extends Entity {
 
                 while (iterator1.hasNext()) {
                     Entity entity1 = (Entity) iterator1.next();
+                    // Pluto start - Option to remove excess vehicles on collision
+                    if (entity1 instanceof AbstractMinecart && this.level().plutoConfig().removeExcessMinecarts && minecartCount++ >= this.level().plutoConfig().excessMinecartsLimit) {
+                        entity1.discard();
+                        continue;
+                    }
+                    // Pluto end - Option to remove excess vehicles on collision
 
                     if (!this.hasPassenger(entity1) && entity1.isPushable() && entity1 instanceof AbstractMinecart) {
                         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 5c07da62c82bc70138f6cb5007629d6974be69ac..a1214bec2921236936182e4822434ad2d905b151 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -469,8 +469,15 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
             boolean flag = !this.level().isClientSide && !(this.getControllingPassenger() instanceof Player);
             Iterator iterator = list.iterator();
 
+            int boatCount = 0; // Pluto - Option to remove excess vehicles on collision
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
+                // Pluto start - Option to remove excess vehicles on collision
+                if (entity instanceof Boat && this.level().plutoConfig().removeExcessBoats && boatCount++ >= this.level().plutoConfig().excessBoatsLimit) {
+                    entity.discard();
+                    continue;
+                }
+                // Pluto end - Option to remove excess vehicles on collision
 
                 if (!entity.hasPassenger((Entity) this)) {
                     if (flag && this.getPassengers().size() < this.getMaxPassengers() && !entity.isPassenger() && this.hasEnoughSpaceFor(entity) && entity instanceof LivingEntity && !(entity instanceof WaterAnimal) && !(entity instanceof Player)) {
