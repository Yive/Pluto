From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yive <6853318+Yive@users.noreply.github.com>
Date: Tue, 27 Aug 2024 17:17:48 -0700
Subject: [PATCH] Implement Dev Tools Unlocker mod support

You need the mod to even be able to connect
when you have the system property set to true.
I made the debug packets require OP for security reasons.

Credit to EightSidedSquare. All I did was just poorly port this.
Mod: https://modrinth.com/mod/dev-tools-unlocker
Video: https://www.youtube.com/watch?v=Rt_hy6FF_P4
Ko-fi: https://ko-fi.com/eightsidedsquare/

diff --git a/src/main/java/net/minecraft/SharedConstants.java b/src/main/java/net/minecraft/SharedConstants.java
index 2ddf0ac0aa09cb36c87c6c58f7b1e6f86ac72b0f..570de097bbcfa00a0ebd6a644c103efe37b2d34a 100644
--- a/src/main/java/net/minecraft/SharedConstants.java
+++ b/src/main/java/net/minecraft/SharedConstants.java
@@ -118,7 +118,7 @@ public class SharedConstants {
     public static final boolean USE_WORKFLOWS_HOOKS = false;
     public static final boolean USE_DEVONLY = false;
     public static boolean CHECK_DATA_FIXER_SCHEMA = true;
-    public static boolean IS_RUNNING_IN_IDE;
+    public static boolean IS_RUNNING_IN_IDE = Boolean.getBoolean("Pluto.DevToolsUnlockerModSupport"); // Pluto - Implement Dev Tools Unlocker mod support
     public static final int WORLD_RESOLUTION = 16;
     public static final int MAX_CHAT_LENGTH = 256;
     public static final int MAX_USER_INPUT_COMMAND_LENGTH = 32500;
diff --git a/src/main/java/net/minecraft/network/protocol/common/ClientboundResourcePackPushPacket.java b/src/main/java/net/minecraft/network/protocol/common/ClientboundResourcePackPushPacket.java
index 92cdcd52a6238fbe3ef6e0f4edc0802a5a32091f..10b873c0e1c156e29f9ea4020d89ce0fe495f25b 100644
--- a/src/main/java/net/minecraft/network/protocol/common/ClientboundResourcePackPushPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/common/ClientboundResourcePackPushPacket.java
@@ -36,7 +36,7 @@ public record ClientboundResourcePackPushPacket(UUID id, String url, String hash
             this.url = url;
             this.hash = hash;
             this.required = required;
-            this.prompt = prompt;
+            this.prompt = net.minecraft.SharedConstants.IS_RUNNING_IN_IDE ? prompt == null ? Optional.empty() : prompt : prompt; // Pluto - Implement Dev Tools Unlocker mod support
         }
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
index 8f6487b63386e46a23c0b050fe29bb92c99e52d5..e077a12fc2987815666d5f2aacd269ddf1cc42c5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
+++ b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
@@ -58,51 +58,169 @@ public class DebugPackets {
     }
 
     public static void sendPoiPacketsForChunk(ServerLevel world, ChunkPos pos) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        sendPacketToAllPlayers(world, new net.minecraft.network.protocol.common.custom.WorldGenAttemptDebugPayload(pos.getWorldPosition().above(100), 1.0F, 1.0F, 1.0F, 1.0F, 1.0F));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendPoiAddedPacket(ServerLevel world, BlockPos pos) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        world.getPoiManager().getType(pos).ifPresent(holder -> sendPacketToAllPlayers(world, new net.minecraft.network.protocol.common.custom.PoiAddedDebugPayload(pos, holder.getRegisteredName(), world.getPoiManager().getFreeTickets(pos))));
+        // Pluto end - Implement Dev Tools Unlocker mod support
         sendVillageSectionsPacket(world, pos);
     }
 
     public static void sendPoiRemovedPacket(ServerLevel world, BlockPos pos) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        sendPacketToAllPlayers(world, new net.minecraft.network.protocol.common.custom.PoiRemovedDebugPayload(pos));
+        // Pluto end - Implement Dev Tools Unlocker mod support
         sendVillageSectionsPacket(world, pos);
     }
 
     public static void sendPoiTicketCountPacket(ServerLevel world, BlockPos pos) {
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        sendPacketToAllPlayers(world, new net.minecraft.network.protocol.common.custom.PoiTicketCountDebugPayload(pos, world.getPoiManager().getFreeTickets(pos)));
         sendVillageSectionsPacket(world, pos);
     }
 
     private static void sendVillageSectionsPacket(ServerLevel world, BlockPos pos) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        net.minecraft.core.Registry<net.minecraft.world.level.levelgen.structure.Structure> registry = world.registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.STRUCTURE);
+        net.minecraft.core.SectionPos sectionPos = net.minecraft.core.SectionPos.of(pos);
+        for (Holder<net.minecraft.world.level.levelgen.structure.Structure> holder : registry.getTagOrEmpty(net.minecraft.tags.StructureTags.VILLAGE)) {
+            if (world.structureManager().startsForStructure(sectionPos, holder.value()).isEmpty()) continue;
+            sendPacketToAllPlayers(world, new net.minecraft.network.protocol.common.custom.VillageSectionsDebugPayload(java.util.Set.of(sectionPos), java.util.Set.of()));
+            return;
+        }
+        sendPacketToAllPlayers(world, new net.minecraft.network.protocol.common.custom.VillageSectionsDebugPayload(java.util.Set.of(), java.util.Set.of(sectionPos)));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendPathFindingPacket(Level world, Mob mob, @Nullable Path path, float nodeReachProximity) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE || path == null || !(world instanceof ServerLevel serverLevel)) return;
+        sendPacketToAllPlayers(serverLevel, new net.minecraft.network.protocol.common.custom.PathfindingDebugPayload(mob.getId(), path, nodeReachProximity));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendNeighborsUpdatePacket(Level world, BlockPos pos) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE || !(world instanceof ServerLevel serverLevel)) return;
+        sendPacketToAllPlayers(serverLevel, new net.minecraft.network.protocol.common.custom.NeighborUpdatesDebugPayload(world.getGameTime(), pos));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendStructurePacket(WorldGenLevel world, StructureStart structureStart) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        List<net.minecraft.network.protocol.common.custom.StructuresDebugPayload.PieceInfo> pieceInfos = new java.util.ArrayList<>();
+        List<net.minecraft.world.level.levelgen.structure.StructurePiece> pieces = structureStart.getPieces();
+        for (int i = 0; i < pieces.size(); i++) {
+            pieceInfos.add(new net.minecraft.network.protocol.common.custom.StructuresDebugPayload.PieceInfo(pieces.get(i).getBoundingBox(), i == 0));
+        }
+        ServerLevel serverLevel = world.getMinecraftWorld();
+        sendPacketToAllPlayers(serverLevel, new net.minecraft.network.protocol.common.custom.StructuresDebugPayload(serverLevel.dimension(), structureStart.getBoundingBox(), pieceInfos));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendGoalSelector(Level world, Mob mob, GoalSelector goalSelector) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE || !(world instanceof ServerLevel serverLevel)) return;
+        List<net.minecraft.network.protocol.common.custom.GoalDebugPayload.DebugGoal> goals = new java.util.ArrayList<>();
+        for (net.minecraft.world.entity.ai.goal.WrappedGoal goal : goalSelector.getAvailableGoals()) {
+            goals.add(new net.minecraft.network.protocol.common.custom.GoalDebugPayload.DebugGoal(goal.getPriority(), goal.isRunning(), goal.getGoal().toString()));
+        }
+        sendPacketToAllPlayers(serverLevel, new net.minecraft.network.protocol.common.custom.GoalDebugPayload(mob.getId(), mob.blockPosition(), goals));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendRaids(ServerLevel server, Collection<Raid> raids) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        List<BlockPos> list = new java.util.ArrayList<>();
+        for (Raid raid : raids) {
+            list.add(raid.getCenter());
+        }
+        sendPacketToAllPlayers(server, new net.minecraft.network.protocol.common.custom.RaidsDebugPayload(list));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendEntityBrain(LivingEntity living) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE || !(living instanceof Mob mob)) return;
+        boolean wantsGolem = false;
+        String inventory = "";
+        int xp = 0;
+        String profession = "";
+        List<String> gossips = new java.util.ArrayList<>();
+        int angerLevel = mob instanceof net.minecraft.world.entity.monster.warden.Warden warden ? warden.getClientAngerLevel() : -1;
+        ServerLevel level = (ServerLevel) mob.level();
+        java.util.Set<BlockPos> pois = new java.util.HashSet<>(), potentialPois = new java.util.HashSet<>();
+        if (mob instanceof net.minecraft.world.entity.npc.Villager villager) {
+            profession = villager.getVillagerData().getProfession().toString();
+            xp = villager.getVillagerXp();
+            inventory = villager.getInventory().toString();
+            wantsGolem = villager.wantsToSpawnGolem(level.getGameTime());
+            for (Entry<UUID, it.unimi.dsi.fastutil.objects.Object2IntMap<net.minecraft.world.entity.ai.gossip.GossipType>> e : villager.getGossips().getGossipEntries().entrySet()) {
+                Entity entity = level.getEntity(e.getKey());
+                if (entity == null) continue;
+
+                String name = DebugEntityNameGenerator.getEntityName(entity);
+                for (it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<net.minecraft.world.entity.ai.gossip.GossipType> entry : e.getValue().object2IntEntrySet()) {
+                    gossips.add(name + ": " + entry.getKey().getSerializedName() + " " + entry.getIntValue());
+                }
+            }
+            net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.npc.Villager> brain = villager.getBrain();
+            addPoi(brain, MemoryModuleType.HOME, pois);
+            addPoi(brain, MemoryModuleType.JOB_SITE, pois);
+            addPoi(brain, MemoryModuleType.MEETING_POINT, pois);
+            addPoi(brain, MemoryModuleType.HIDING_PLACE, pois);
+            addPoi(brain, MemoryModuleType.POTENTIAL_JOB_SITE, potentialPois);
+        }
+        sendPacketToAllPlayers(level, new net.minecraft.network.protocol.common.custom.BrainDebugPayload(new net.minecraft.network.protocol.common.custom.BrainDebugPayload.BrainDump(mob.getUUID(), mob.getId(), mob.getName().getString(), profession, xp, mob.getHealth(), mob.getMaxHealth(), mob.position(), inventory, mob.getNavigation().getPath(), wantsGolem, angerLevel, mob.getBrain().getActiveActivities().stream().map(net.minecraft.world.entity.schedule.Activity::toString).toList(), mob.getBrain().getRunningBehaviors().stream().map(net.minecraft.world.entity.ai.behavior.BehaviorControl::debugString).toList(), getMemoryDescriptions(mob, level.getGameTime()), gossips, pois, potentialPois)));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
+    // Pluto start - Implement Dev Tools Unlocker mod support
+    private static void addPoi(net.minecraft.world.entity.ai.Brain<?> brain, MemoryModuleType<GlobalPos> moduleType, java.util.Set<BlockPos> set) {
+        brain.getMemory(moduleType).map(GlobalPos::pos).ifPresent(set::add);
+    }
+    // Pluto end - Implement Dev Tools Unlocker mod support
+
     public static void sendBeeInfo(Bee bee) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        java.util.Set<String> goals = new java.util.HashSet<>();
+        for (net.minecraft.world.entity.ai.goal.WrappedGoal goal : bee.getGoalSelector().getAvailableGoals()) {
+            goals.add(goal.getGoal().toString());
+        }
+        sendPacketToAllPlayers(((ServerLevel) bee.level()), new net.minecraft.network.protocol.common.custom.BeeDebugPayload(new net.minecraft.network.protocol.common.custom.BeeDebugPayload.BeeInfo(bee.getUUID(), bee.getId(), bee.position(), bee.getNavigation().getPath(), bee.getHivePos(), bee.getSavedFlowerPos(), bee.getTravellingTicks(), goals, bee.getBlacklistedHives())));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendBreezeInfo(Breeze breeze) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) return;
+        sendPacketToAllPlayers(((ServerLevel) breeze.level()), new net.minecraft.network.protocol.common.custom.BreezeDebugPayload(new net.minecraft.network.protocol.common.custom.BreezeDebugPayload.BreezeInfo(breeze.getUUID(), breeze.getId(), breeze.getTarget() == null ? null : Integer.valueOf(breeze.getTarget().getId()), breeze.getBrain().getMemory(MemoryModuleType.BREEZE_JUMP_TARGET).orElse(null))));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendGameEventInfo(Level world, Holder<GameEvent> event, Vec3 pos) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE || !(world instanceof ServerLevel level)) return;
+        event.unwrapKey().ifPresent(key -> sendPacketToAllPlayers(level, new net.minecraft.network.protocol.common.custom.GameEventDebugPayload(key, pos)));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendGameEventListenerInfo(Level world, GameEventListener eventListener) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (!net.minecraft.SharedConstants.IS_RUNNING_IN_IDE || !(world instanceof ServerLevel level)) return;
+        sendPacketToAllPlayers(level, new net.minecraft.network.protocol.common.custom.GameEventListenerDebugPayload(eventListener.getListenerSource(), eventListener.getListenerRadius()));
+        // Pluto end - Implement Dev Tools Unlocker mod support
     }
 
     public static void sendHiveInfo(Level world, BlockPos pos, BlockState state, BeehiveBlockEntity blockEntity) {
@@ -176,6 +294,7 @@ public class DebugPackets {
         Packet<?> packet = new ClientboundCustomPayloadPacket(payload);
 
         for (ServerPlayer serverPlayer : world.players()) {
+            if (!serverPlayer.hasPermissions(2)) continue; // Pluto - Implement Dev Tools Unlocker mod support
             serverPlayer.connection.send(packet);
         }
     }
diff --git a/src/main/java/net/minecraft/server/commands/SpawnArmorTrimsCommand.java b/src/main/java/net/minecraft/server/commands/SpawnArmorTrimsCommand.java
index 9e00f7125874a3cd09bddb75b0dae6a59f28448f..e6ed2db984c9b4453ced7e2d33e54a9d51070839 100644
--- a/src/main/java/net/minecraft/server/commands/SpawnArmorTrimsCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpawnArmorTrimsCommand.java
@@ -36,6 +36,12 @@ import net.minecraft.world.level.Level;
 
 public class SpawnArmorTrimsCommand {
     private static final Map<Pair<Holder<ArmorMaterial>, EquipmentSlot>, Item> MATERIAL_AND_SLOT_TO_ITEM = Util.make(Maps.newHashMap(), map -> {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        map.put(Pair.of(ArmorMaterials.LEATHER, EquipmentSlot.HEAD), Items.LEATHER_HELMET);
+        map.put(Pair.of(ArmorMaterials.LEATHER, EquipmentSlot.CHEST), Items.LEATHER_CHESTPLATE);
+        map.put(Pair.of(ArmorMaterials.LEATHER, EquipmentSlot.LEGS), Items.LEATHER_LEGGINGS);
+        map.put(Pair.of(ArmorMaterials.LEATHER, EquipmentSlot.FEET), Items.LEATHER_BOOTS);
+        // Pluto end - Implement Dev Tools Unlocker mod support
         map.put(Pair.of(ArmorMaterials.CHAIN, EquipmentSlot.HEAD), Items.CHAINMAIL_HELMET);
         map.put(Pair.of(ArmorMaterials.CHAIN, EquipmentSlot.CHEST), Items.CHAINMAIL_CHESTPLATE);
         map.put(Pair.of(ArmorMaterials.CHAIN, EquipmentSlot.LEGS), Items.CHAINMAIL_LEGGINGS);
@@ -122,7 +128,7 @@ public class SpawnArmorTrimsCommand {
 
         for (ArmorTrim armorTrim : nonNullList) {
             for (ArmorMaterial armorMaterial : registry3) {
-                if (armorMaterial != ArmorMaterials.LEATHER.value()) {
+                if (armorMaterial != ArmorMaterials.ARMADILLO.value()) { // Pluto - Implement Dev Tools Unlocker mod support
                     double e = (double)blockPos.getX() + 0.5 - (double)(j % registry2.size()) * 3.0;
                     double f = (double)blockPos.getY() + 0.5 + (double)(k % i) * 3.0;
                     double g = (double)blockPos.getZ() + 0.5 + (double)(j / registry2.size() * 10);
@@ -131,7 +137,7 @@ public class SpawnArmorTrimsCommand {
                     armorStand.setNoGravity(true);
 
                     for (EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-                        Item item = MATERIAL_AND_SLOT_TO_ITEM.get(Pair.of(armorMaterial, equipmentSlot));
+                        Item item = MATERIAL_AND_SLOT_TO_ITEM.get(Pair.of(net.minecraft.core.registries.BuiltInRegistries.ARMOR_MATERIAL.wrapAsHolder(armorMaterial), equipmentSlot)); // Pluto - Implement Dev Tools Unlocker mod support
                         if (item != null) {
                             ItemStack itemStack = new ItemStack(item);
                             itemStack.set(DataComponents.TRIM, armorTrim);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Path.java b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
index d9d0fff9962131808d54cca20f209df50b8e4af1..df634ee2677433f80bf8fce91bfdf024b44ca184 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/Path.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
@@ -132,6 +132,19 @@ public class Path {
     }
 
     public void writeToStream(FriendlyByteBuf buf) {
+        // Pluto start - Implement Dev Tools Unlocker mod support
+        if (net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) {
+            List<Node> closed = new java.util.ArrayList<>(), open = new java.util.ArrayList<>();
+            for (Node node1 : this.nodes) {
+                if (node1.closed) {
+                    closed.add(node1);
+                } else {
+                    open.add(node1);
+                }
+            }
+            setDebug(open.toArray(Node[]::new), closed.toArray(Node[]::new), Set.of(new Target(this.target.getX(), this.target.getY(), this.target.getZ())));
+        }
+        // Pluto end - Implement Dev Tools Unlocker mod support
         if (this.debugData != null && !this.debugData.targetNodes.isEmpty()) {
             buf.writeBoolean(this.reached);
             buf.writeInt(this.nextNodeIndex);
