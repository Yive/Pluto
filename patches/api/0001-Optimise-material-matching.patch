From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yive <6853318+Yive@users.noreply.github.com>
Date: Wed, 18 Jan 2023 01:13:29 -0800
Subject: [PATCH] Optimise material matching


diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 3c5e90f039f0d2991be442168703526405e18e3d..125ffed17c372c75a8b856a852fd3fce2b0a4c27 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -5830,6 +5830,24 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         return matchMaterial(name, false);
     }
 
+    // Pluto start - Optimise material matching
+    private static boolean isWhitespace(int c) {
+        return c == ' ' || c == '\n' || c == '\t' || c == '\r' || c == '\f';
+    }
+
+    private static boolean isLetterOrDigit(int c) {
+        return (c >= 'A' && c <= 'Z') || c == '_' || (c >= '0' && c <= '9');
+    }
+
+    private static char toUpperCase(char c) {
+        return (c >= 'a' && c <= 'z') ? (char) (c - 32) : c;
+    }
+
+    private static boolean isLowerCase(char c) {
+        return c >= 'a' && c <= 'z';
+    }
+    // Pluto end - Optimise material matching
+
     /**
      * Attempts to match the Material with the given name.
      * <p>
@@ -5851,9 +5869,50 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             filtered = filtered.substring((NamespacedKey.MINECRAFT + ":").length());
         }
 
+        // Pluto start - Optimise material matching
+        /*
         filtered = filtered.toUpperCase(java.util.Locale.ENGLISH);
 
         filtered = filtered.replaceAll("\\s+", "_").replaceAll("\\W", "");
+         */
+        char[] chars = filtered.toCharArray();
+        boolean wasChanged = false;
+        int oldLength = chars.length, newLength = oldLength;
+
+        for (int i = 0; i < oldLength; i++) {
+            if (isLetterOrDigit(chars[i])) continue;
+
+            if (isLowerCase(chars[i])) {
+                chars[i] = toUpperCase(chars[i]);
+                wasChanged = true;
+                continue;
+            }
+
+            if (isWhitespace(chars[i])) {
+                chars[i] = '_';
+                wasChanged = true;
+                continue;
+            }
+
+            chars[i] = '\0';
+            newLength--;
+            wasChanged = true;
+        }
+
+        if (wasChanged) {
+            if (newLength != oldLength) {
+                char[] newChars = new char[newLength];
+                int index = 0;
+                for (int i = 0; i < oldLength; i++) {
+                    if (chars[i] == '\0') continue;
+                    newChars[index] = chars[i];
+                    index++;
+                }
+                chars = newChars;
+            }
+            filtered = new String(chars);
+        }
+        // Pluto end - Optimise material matching
         return getMaterial(filtered, legacyName);
     }
 
